 public String gcdOfStrings(String str1, String str2) {
        int len1 = str1.length();
        int len2 = str2.length();
        
        // Find the greatest common divisor of the lengths of str1 and str2
        int gcdLength = gcd(len1, len2);
        
        // Check substrings of length gcdLength for divisibility
        String divisor = str1.substring(0, gcdLength);
        if (checkDivisibility(str1, divisor) && checkDivisibility(str2, divisor)) {
            return divisor;
        }
        
        // If not divisible, keep reducing gcdLength until 1
        while (gcdLength > 1) {
            gcdLength = gcd(gcdLength - 1, gcdLength);
            divisor = str1.substring(0, gcdLength);
            if (checkDivisibility(str1, divisor) && checkDivisibility(str2, divisor)) {
                return divisor;
            }
        }
        
        return "";
    }
    
    // Function to check if a string is divisible by a divisor
    private boolean checkDivisibility(String str, String divisor) {
        int len = str.length();
        int divisorLen = divisor.length();
        
        if (len % divisorLen != 0) {
            return false;
        }
        
        for (int i = 0; i < len; i += divisorLen) {
            if (!str.substring(i, i + divisorLen).equals(divisor)) {
                return false;
            }
        }
        
        return true;
    }
    
    // Function to find the greatest common divisor using Euclidean algorithm
    private int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
